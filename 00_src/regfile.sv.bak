`include "timescale.svh"
module regfile(
  input  logic        i_clk     , 
  input  logic        i_rst     , 
  input  logic        i_rd_wren ,
  input  logic [4:0]  i_rs1_addr, 
  input  logic [4:0]  i_rs2_addr, 
  input  logic [4:0]  i_rd_addr ,
  input  logic [31:0] i_rd_data ,
  output logic [31:0] o_rs1_data, 
  output logic [31:0] o_rs2_data
);

  logic [31:0] register [31:0];
  integer i;

  always_ff @(posedge i_clk or negedge i_rst) begin : register_decoder
    if (i_rst) begin
      // Reset all registers to zero
      for (i = 0; i < 32; i = i + 1) begin
        register[i] <= 32'b0;
      end
    end else if (i_rd_wren & (i_rd_addr != 5'h00)) begin
      register[i_rd_addr] <= i_rd_data;
    end
  end : register_decoder

  assign o_rs1_data = (~i_rst) ? 32'd0 : register[i_rs1_addr];
  assign o_rs2_data = (~i_rst) ? 32'd0 : register[i_rs2_addr];

endmodule : regfile
